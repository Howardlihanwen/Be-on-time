{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import holidays\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import FuncFormatter\n",
    "# 看全部欄位，不要折疊\n",
    "# pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Cheng\\AppData\\Local\\Temp\\ipykernel_10600\\2237930748.py:39: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  holiday_df['date'] = pd.to_datetime(holiday_df['date'])\n"
     ]
    }
   ],
   "source": [
    "# loading raw data，移除airport相關欄位(目前用不到)\n",
    "usecol = ['year_actu_depa', 'month_actu_depa', 'day_actu_depa', 'hr_actu_depa', 'min_actu_depa', 'delay_dest']\n",
    "flight = pd.read_csv('./US_1722_flights_info_IQR.csv', usecols=usecol)\n",
    "\n",
    "\n",
    "''' Week '''\n",
    "# 將年月日欄位合併成一個columns並且設為datetime格式\n",
    "flight[\"date\"] = pd.to_datetime(flight[\"year_actu_depa\"].astype(str) + \"/\" +\n",
    "                                flight[\"month_actu_depa\"].astype(str) + \"/\" + \n",
    "                                flight[\"day_actu_depa\"].astype(str))\n",
    "\n",
    "# 將日期轉換成星期，星期表達方式是0-6，0是星期一，6是星期日\n",
    "# 較快寫法，直接利用pandas的dt物件，可直接在日期欄位使用dt.weekday，直接做向量化運算，不用迭代\n",
    "flight[\"week\"] = flight[\"date\"].dt.weekday\n",
    "\n",
    "# 定義week：0-4為平日，5,6為假日，切分區間\n",
    "# 因pd.cut()，左邊值不包含故設為-1, 右邊值包含故為6\n",
    "bins = [-1, 4, 6]\n",
    "labels = ['on_weekday', 'weekend']\n",
    "flight['week_classify'] = pd.cut(flight['week'], bins=bins, labels=labels)\n",
    "\n",
    "''' holidays '''\n",
    "# 取得2017-2022 US holiday date跟holiday names\n",
    "holiday_list = []\n",
    "for holiday in holidays.US(years=[2017,2018,2019,2020,2021,2022]).items():\n",
    "    holiday_list.append(holiday)\n",
    "\n",
    "holidays_df = pd.DataFrame(holiday_list, columns=[\"date\", \"holiday\"])\n",
    "# holidays_df['holiday'].drop_duplicates()\n",
    "\n",
    "# 選擇重大節日，有連假的節日，有八個\n",
    "eight_holidays = [\"New Year's Day\", \"Martin Luther King Jr. Day\", \"Washington's Birthday\", \"Memorial Day\", \"Independence Day\", \"Labor Day\", \"Thanksgiving\", \"Christmas Day\"]\n",
    "\n",
    "# holiday是八個重大節日才要\n",
    "holiday_df = holidays_df[holidays_df['holiday'].isin(eight_holidays)]\n",
    "# holiday_df.dtypes\n",
    "\n",
    "# 轉成date欄位轉成datetime格式\n",
    "holiday_df['date'] = pd.to_datetime(holiday_df['date'])\n",
    "\n",
    "# delay_rate_by_holiday merge holiday_df\n",
    "flight = flight.merge(holiday_df, left_on=\"date\", right_on=\"date\", how=\"left\")\n",
    "\n",
    "# 檢查是否成功merge\n",
    "# delay_rate_by_holiday[delay_rate_by_holiday['holiday'].notna()]\n",
    "\n",
    "# 判斷delay_rate_by_holiday的date欄位跟holiday_df是否符合\n",
    "flight['is_holidays'] = flight['date'].isin(holiday_df['date'])\n",
    "\n",
    "''' Time'''\n",
    "# 定義小時切分區間\n",
    "# 因pd.cut()，左邊值不包含故設為-1, 右邊值包含故為23\n",
    "bins = [-1, 6, 12, 18, 23]\n",
    "labels = ['early morning', 'morning', 'afternoon', 'night']\n",
    "\n",
    "flight['time_period'] = pd.cut(flight['hr_actu_depa'], bins=bins, labels=labels)\n",
    "\n",
    "''' 疫情前後 '''\n",
    "year_bin = [2016, 2019, 2022]\n",
    "year_labels = ['before_epidemic', 'after_epidemic']\n",
    "flight['year_epidemic'] = pd.cut(flight['year_actu_depa'], bins=year_bin, labels=year_labels)\n",
    "\n",
    "''' Other '''\n",
    "# 把delay分級級距\n",
    "# bins = [-np.inf, 0, 15, 30, 45, 60, 75, 90, 105, 120,135,150,165,180,np.inf]\n",
    "# flight['delay_depa_cate'] = pd.cut(flight['delay'], bins=bins, labels=[0, 1,2, 3, 4, 5, 6, 7,8,9,10,11,12,13])\n",
    "\n",
    "''' 篩選畫圖所需欄位'''\n",
    "\n",
    "# 圖一\n",
    "delay_rate_by_year_month = flight[[\"year_actu_depa\", \"month_actu_depa\", \"delay_dest\"]]\n",
    "# 圖二\n",
    "delay_rate_by_year = flight[[\"year_actu_depa\", \"delay_dest\", \"year_epidemic\"]]\n",
    "# 圖三\n",
    "delay_rate_by_holiday = flight[[\"date\", \"holiday\", \"delay_dest\", \"year_epidemic\"]]\n",
    "# 圖四\n",
    "delay_rate_by_hours = flight[[\"hr_actu_depa\", \"delay_dest\"]]\n",
    "\n",
    "# delay_rate_by_month = flight[[\"depa_month\", \"delay\"]]\n",
    "# delay_rate_by_week = flight[[\"week\", \"delay\"]]\n",
    "# delay_rate_by_holiday = flight[[\"is_holidays\", \"delay\"]]\n",
    "# delay_rate_by_eight_holiday = flight[[\"holiday\", \"delay\"]]\n",
    "# delay_rate_by_time = flight[[\"time_period\", \"delay\"]]\n",
    "\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot - 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def flight_year_month(dataset, delay_time):\n",
    "    ''' Data '''\n",
    "    flight_count = pd.DataFrame()\n",
    "    # by time_period 總航班\n",
    "    flight_count['year_month_count'] = dataset.groupby(['year_actu_depa', 'month_actu_depa']).count()[['delay_dest']]\n",
    "    # by time_period 有誤點的航班\n",
    "    flight_count['year_month_delay_count'] = dataset[dataset['delay_dest'] > delay_time].groupby(['year_actu_depa', 'month_actu_depa']).count()[['delay_dest']]\n",
    "\n",
    "    # 有delay的航班 / 總航班數\n",
    "    flight_count['delay_rate'] = flight_count[\"year_month_delay_count\"] / flight_count[\"year_month_count\"]\n",
    "\n",
    "    # 重新排序，並將depa_month轉成字串\n",
    "    flight_count = flight_count.reset_index(drop=False).sort_values('month_actu_depa')\n",
    "    flight_count['month_actu_depa'] = flight_count['month_actu_depa'].astype(str)\n",
    "    ''' Plot '''\n",
    "    # 圖表背景的風格\n",
    "    sns.set_style('darkgrid')\n",
    "\n",
    "    # 設定畫布大小\n",
    "    # plt.subplots(figsize=(15,6))\n",
    "    \n",
    "    # 調色板風格，其顏色較柔和\n",
    "    sns.set_palette('pastel')\n",
    "\n",
    "    # lineplot，marker='o' 代表有point\n",
    "    # sns.lineplot(data = flight_count, x=\"depa_month\", y=\"delay_rate\", hue=\"depa_year\", color='gray').set(title = \"Delay Rate by Time\", xlabel = \"Month\", ylabel = \"Delay Rate\")\n",
    "    \n",
    "    # 使用relplot可以將hue產生的圖示放在圖的外面，不會擋到線\n",
    "    # kind=\"line\"是畫線圖的意思，height&aspect是設定大小，relplot不適用plt.subplots()\n",
    "    sns.relplot(data = flight_count, x=\"month_actu_depa\", y=\"delay_rate\", hue=\"year_actu_depa\", color='gray', kind=\"line\",  height=6, aspect=1.5).set(title = \"Delay Rate by Year & Month\", xlabel = \"Month\", ylabel = \"Delay Rate\")\n",
    "    \n",
    "    # 可指定圖示位置，但還是會擋到線\n",
    "    #plt.legend(loc=\"upper left\")\n",
    "    # plt.show()\n",
    "    # 設定文字\n",
    "    # plt.set_title('Delay Rate by Time')\n",
    "    # plt.set_ylabel('Delay Rate')\n",
    "    # plt.set_xlabel('Month')\n",
    "\n",
    "    # 自定義Y軸標籤格式(再算總數時才需要)\n",
    "    # ax1.yaxis.set_major_formatter(FuncFormatter(lambda x, loc: \"{:.0f}\".format(x)))\n",
    "\n",
    "    #將圖表另存出來為'XXX.png'，還可以存為jpg、svg等格式的圖片\n",
    "    plt.savefig('../images/Time_Delay_by_year_month_Final.png')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot 1-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def flight_year_epidemic_month(dataset, delay_time):\n",
    "    ''' Data '''\n",
    "    flight_year_epidemic_count = pd.DataFrame()\n",
    "    # 設定year_epidemic\n",
    "    dataset['year_epidemic'] = pd.cut(dataset['year_actu_depa'], bins=year_bin, labels=year_labels)\n",
    "\n",
    "    # by time_period 總航班\n",
    "    flight_year_epidemic_count['year_month_count'] = dataset.groupby(['year_epidemic', 'month_actu_depa']).count()[['delay_dest']]\n",
    "    # by time_period 有誤點的航班\n",
    "    flight_year_epidemic_count['year_month_delay_count'] = dataset[dataset['delay_dest'] > delay_time].groupby(['year_epidemic', 'month_actu_depa']).count()[['delay_dest']]\n",
    "\n",
    "    # 有delay的航班 / 總航班數\n",
    "    flight_year_epidemic_count['delay_rate'] = flight_year_epidemic_count[\"year_month_delay_count\"] / flight_year_epidemic_count[\"year_month_count\"]\n",
    "\n",
    "    # 排序，設定型態\n",
    "    flight_year_epidemic_count = flight_year_epidemic_count.reset_index(drop=False).sort_values('month_actu_depa')\n",
    "    flight_year_epidemic_count['month_actu_depa'] = flight_year_epidemic_count['month_actu_depa'].astype(str)\n",
    "\n",
    "    ''' Plot '''\n",
    "    # 圖表背景的風格\n",
    "    sns.set_style('darkgrid')\n",
    "\n",
    "    # 設定畫布大小\n",
    "    # plt.subplots(figsize=(20,6))\n",
    "    \n",
    "    # 調色板風格，其顏色較柔和\n",
    "    sns.set_palette('pastel')\n",
    "\n",
    "    # lineplot，marker='o' 代表有point\n",
    "    # sns.lineplot(data = flight_count, x=\"depa_month\", y=\"delay_rate\", hue=\"depa_year\", color='gray').set(title = \"Delay Rate by Time\", xlabel = \"Month\", ylabel = \"Delay Rate\")\n",
    "    \n",
    "    sns.relplot(data = flight_year_epidemic_count, x=\"month_actu_depa\", y=\"delay_rate\", hue=\"year_epidemic\", color='gray', kind=\"line\",  height=6, aspect=1.5).set(title = \"Delay Rate by Month & year_epidemic\", xlabel = \"Month\", ylabel = \"Delay Rate\")\n",
    "    \n",
    "    # plt.legend(loc=\"upper right\")\n",
    "    # 設定文字\n",
    "    # plt.set_title('Delay Rate by Time')\n",
    "    # plt.set_ylabel('Delay Rate')\n",
    "    # plt.set_xlabel('Month')\n",
    "    # plt.show()\n",
    "    # 自定義Y軸標籤格式\n",
    "    # ax1.yaxis.set_major_formatter(FuncFormatter(lambda x, loc: \"{:.0f}\".format(x)))\n",
    "\n",
    "    #將圖表另存出來為'XXX.png'，還可以存為jpg、svg等格式的圖片\n",
    "    plt.savefig('../images/Time_Delay_by_year_month_epidemic_Final.png')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot - 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Yearly_Delay(dataset, delay_time):\n",
    "    ''' Data '''\n",
    "    # 邏輯：以年份分組，每年有延誤的航班數 / 每年總航班數 = 誤點率\n",
    "    year_delay = pd.DataFrame()\n",
    "    # by year 取得總航班數\n",
    "    year_delay['year_count'] = dataset.groupby(\"year_actu_depa\").count()[['delay_dest']]\n",
    "    # by year 取得有delay的航班\n",
    "    year_delay['year_delay_count'] = dataset[dataset['delay_dest'] > delay_time].groupby(\"year_actu_depa\").count()[['delay_dest']]\n",
    "\n",
    "    # 有delay的航班 / 總航班數\n",
    "    year_delay['delay_rate'] = year_delay['year_delay_count'] / year_delay['year_count']\n",
    "\n",
    "    # 重新排序\n",
    "    year_delay = year_delay.reset_index(drop=False).sort_values('year_actu_depa')\n",
    "\n",
    "    ''' Plot '''\n",
    "    #調色板風格，其顏色較柔和\n",
    "    sns.set_palette('pastel')\n",
    "\n",
    "    #圖表背景的風格，灰(白)底有格線\n",
    "    sns.set_style('darkgrid')\n",
    "\n",
    "    #設定畫布大小\n",
    "    plt.figure(figsize=(12, 6))\n",
    "\n",
    "    # lineplot\n",
    "    sns.lineplot(data = year_delay, x=\"year_actu_depa\" , y=\"delay_rate\", marker='o').set(title='Delay rate by year', xlabel = \"Year\", ylabel = \"Delay rate\")\n",
    "\n",
    "    # plt.show()\n",
    "    #將圖表另存出來為'XXX.png'，還可以存為jpg、svg等格式的圖片\n",
    "    plt.savefig('../images/Time_Delay_By_Yearly_Final.png')\n",
    "\n",
    "\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot - 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Holiday_Delay(dataset, delay_time):\n",
    "    ''' Data '''\n",
    "    # 邏輯：以年份分組，每年有延誤的航班數 / 每年總航班數 = 誤點率\n",
    "    holiday_delay = pd.DataFrame()\n",
    "    # by year 取得總航班數\n",
    "    holiday_delay['holiday_count'] = dataset.groupby([\"holiday\",\"year_epidemic\"]).count()[['delay_dest']]\n",
    "    # by year 取得有delay的航班\n",
    "    holiday_delay['holiday_delay_count'] = dataset[dataset['delay_dest'] > delay_time].groupby([\"holiday\", \"year_epidemic\"]).count()[['delay_dest']]\n",
    "\n",
    "    # 有delay的航班 / 總航班數\n",
    "    holiday_delay['delay_rate'] = holiday_delay['holiday_delay_count'] / holiday_delay['holiday_count']\n",
    "\n",
    "    # 重新排序\n",
    "    holiday_delay = holiday_delay.reset_index(drop=False)\n",
    "    # 再把日期合併進來以便x軸排序\n",
    "    holiday_delay = holiday_delay.merge(holiday_df, left_on=\"holiday\", right_on=\"holiday\", how=\"left\")\n",
    "    holiday_delay = holiday_delay.sort_values('date')\n",
    "\n",
    "    ''' Plot '''\n",
    "    #調色板風格，其顏色較柔和\n",
    "    sns.set_palette('pastel')\n",
    "\n",
    "    #圖表背景的風格，灰(白)底有格線\n",
    "    sns.set_style('darkgrid')\n",
    "\n",
    "    #設定畫布大小\n",
    "    plt.figure(figsize=(15, 6))\n",
    "\n",
    "    # lineplot\n",
    "    sns.lineplot(data = holiday_delay, x=\"holiday\" , y=\"delay_rate\", hue=\"year_epidemic\", marker='o').set(title='Delay rate by Holiday', xlabel = \"Holiday\", ylabel = \"Delay rate\")\n",
    "\n",
    "    # plt.show()\n",
    "    #將圖表另存出來為'XXX.png'，還可以存為jpg、svg等格式的圖片\n",
    "    plt.savefig('../images/Time_Delay_By_Holiday_Final.png')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot - 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Hour_Delay(dataset, delay_time):\n",
    "    ''' Data '''\n",
    "    # 邏輯：以年份分組，每年有延誤的航班數 / 每年總航班數 = 誤點率\n",
    "    hour_delay = pd.DataFrame()\n",
    "    # by year 取得總航班數\n",
    "    hour_delay['hour_count'] = dataset.groupby(\"hr_actu_depa\").count()[['delay_dest']]\n",
    "    # by year 取得有delay的航班\n",
    "    hour_delay['hour_delay_count'] = dataset[dataset['delay_dest'] > delay_time].groupby(\"hr_actu_depa\").count()[['delay_dest']]\n",
    "\n",
    "    # 有delay的航班 / 總航班數\n",
    "    hour_delay['delay_rate'] = hour_delay['hour_delay_count'] / hour_delay['hour_count']\n",
    "   \n",
    "    # 重新排序\n",
    "    hour_delay = hour_delay.reset_index(drop=False).sort_values('hr_actu_depa')\n",
    "    hour_delay['hr_actu_depa'] = hour_delay['hr_actu_depa'].astype(str)\n",
    "\n",
    "    ''' Plot '''\n",
    "    #調色板風格，其顏色較柔和\n",
    "    sns.set_palette('pastel')\n",
    "\n",
    "    #圖表背景的風格，灰(白)底有格線\n",
    "    sns.set_style('darkgrid')\n",
    "\n",
    "    # 設定畫布大小\n",
    "    fig, ax1 = plt.subplots(figsize=(12,6))\n",
    "\n",
    "    # barplot\n",
    "    sns.barplot(data = hour_delay, x=\"hr_actu_depa\" , y=\"hour_count\", palette=\"dark:#84C1FF\", ax=ax1)\n",
    "    # 設定左側y軸標籤\n",
    "    ax1.set_ylabel('hour_count')\n",
    "\n",
    "    # 畫不同的Y軸\n",
    "    ax2 = ax1.twinx()\n",
    "    # lineplot\n",
    "    sns.lineplot(data = hour_delay, x=\"hr_actu_depa\" , y=\"delay_rate\", marker='o', ax = ax2)\n",
    "\n",
    "    # 設定右側y軸標籤\n",
    "    ax2.set_ylabel('delay rate')\n",
    "    # 不顯示網格線\n",
    "    ax2.yaxis.grid(False)\n",
    "\n",
    "    # 設定title跟x軸文字\n",
    "    ax1.set_title('Delay rate by Hour')\n",
    "    ax1.set_xlabel('Hour')\n",
    "\n",
    "    # 自定義Y軸標籤格式\n",
    "    ax1.yaxis.set_major_formatter(FuncFormatter(lambda x, loc: \"{:.0f}\".format(x)))\n",
    "\n",
    "    # plt.show()\n",
    "    #將圖表另存出來為'XXX.png'，還可以存為jpg、svg等格式的圖片\n",
    "    plt.savefig('../images/Time_Delay_By_Hour_Final.png')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Cheng\\AppData\\Local\\Temp\\ipykernel_10600\\2311642066.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dataset['year_epidemic'] = pd.cut(dataset['year_actu_depa'], bins=year_bin, labels=year_labels)\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    flight_year_month(delay_rate_by_year_month, 5)\n",
    "    flight_year_epidemic_month(delay_rate_by_year_month, 5)\n",
    "    Yearly_Delay(delay_rate_by_year, 5)\n",
    "    Holiday_Delay(delay_rate_by_holiday, 5)\n",
    "    Hour_Delay(delay_rate_by_hours, 5)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

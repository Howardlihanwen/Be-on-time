{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''第一階段爬蟲'''\n",
    "'''目標：取得 NOAA 全美地區天氣觀測站的 station WBAN_url list'''\n",
    "'''匯入套件'''\n",
    "# 操作 browser 的 API\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "from selenium import webdriver\n",
    "\n",
    "# 處理逾時例外的工具\n",
    "from selenium.common.exceptions import TimeoutException\n",
    "# 面對動態網頁，等待某個元素出現的工具，通常與 exptected_conditions 搭配\n",
    "from selenium.webdriver.support.ui import WebDriverWait\n",
    "# 搭配 WebDriverWait 使用，對元素狀態的一種期待條件，若條件發生，則等待結束，往下一行執行\n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "# 期待元素出現要透過什麼方式指定，通常與 EC、WebDriverWait 一起使用\n",
    "from selenium.webdriver.common.by import By\n",
    "# 處理下拉式選單的工具\n",
    "from selenium.webdriver.support.ui import Select\n",
    "\n",
    "# 強制等待 (執行期間休息一下)\n",
    "from time import sleep\n",
    "# 整理 json 使用的工具\n",
    "import json\n",
    "# 執行 command 的時候用的\n",
    "import os\n",
    "# 美麗湯\n",
    "from bs4 import BeautifulSoup as bs\n",
    "\n",
    "# 隨機取得 User-Agent\n",
    "from fake_useragent import UserAgent\n",
    "ua = UserAgent(use_external_data = True)\n",
    "\n",
    "# 啟動瀏覽器工具的選項\n",
    "my_options = webdriver.ChromeOptions()\n",
    "# my_options.add_argument(\"--headless\")               #不開啟實體瀏覽器背景執行\n",
    "my_options.add_argument(\"--start-maximized\")         #最大化視窗\n",
    "my_options.add_argument(\"--incognito\")               #開啟無痕模式\n",
    "my_options.add_argument(\"--disable-popup-blocking\")  #禁用彈出攔截\n",
    "my_options.add_argument(\"--disable-notifications\")   #取消 chrome 推播通知\n",
    "my_options.add_argument(f'--user-agent={ua.random}') #(Optional)加入 User-Agent\n",
    "\n",
    "# 使用 Chrome 的 WebDriver\n",
    "my_service = Service(executable_path=\"./chromedriver.exe\")\n",
    "driver = webdriver.Chrome(\n",
    "    options = my_options,\n",
    "    service = my_service\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''下拉式選單選擇 United States'''\n",
    "# 開啟網頁 NOAA - United States 頁面\n",
    "driver.get(\"https://www.ncdc.noaa.gov/cdo-web/datatools/lcd\")\n",
    "\n",
    "# 取得檢視原始碼的內容\n",
    "html1 = driver.page_source\n",
    "\n",
    "# 指定 lxml 作為解析器\n",
    "soup1 = bs(html1, \"lxml\")\n",
    "\n",
    "# 等待元素出現\n",
    "WebDriverWait(driver, 10).until(\n",
    "    EC.presence_of_element_located(\n",
    "    (By.CSS_SELECTOR, 'div.locationCategoryFilter.slideElement.slideVisible > select.selectFilter')\n",
    "    ))\n",
    "\n",
    "# 選擇篩選型態\n",
    "Select_a_Location_Type = Select(driver.find_element(By.CSS_SELECTOR, 'div.locationCategoryFilter.slideElement.slideVisible > select.selectFilter'))\n",
    "\n",
    "# 選擇 \"Country\"\n",
    "Select_a_Location_Type.select_by_visible_text('Country')\n",
    "\n",
    "# 睡一下\n",
    "sleep(3)\n",
    "\n",
    "# 取得檢視原始碼的內容\n",
    "html2 = driver.page_source\n",
    "\n",
    "# 指定 lxml 作為解析器\n",
    "soup2 = bs(html2, \"lxml\")\n",
    "\n",
    "# 選擇篩選國家\n",
    "Select_a_Country = Select(driver.find_element(By.CSS_SELECTOR, 'div.countryFilter.slideElement.slideVisible > select#selectedCountry'))\n",
    "\n",
    "# 選擇 \"United States\"\n",
    "Select_a_Country.select_by_visible_text('United States')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''取得 stationID list'''\n",
    "# 建立 stationID list\n",
    "lst_stationID = []\n",
    "\n",
    "# 逾時計數器\n",
    "i = 0\n",
    "\n",
    "while True:\n",
    "    try:\n",
    "        # 睡一下\n",
    "        sleep(3)\n",
    "\n",
    "        # 取得檢視原始碼的內容\n",
    "        html3 = driver.page_source\n",
    "\n",
    "        # 指定 lxml 作為解析器\n",
    "        soup3 = bs(html3, \"lxml\")\n",
    "\n",
    "        # 生成式\n",
    "        lst_stationID += [f\"https://www.ncdc.noaa.gov/cdo-web/datasets/LCD/stations/{a.get_text()}/detail\" for a in soup3.select('div > span.stationID')]\n",
    "\n",
    "        # 等待元素出現\n",
    "        WebDriverWait(driver, 20).until(\n",
    "        EC.presence_of_element_located(\n",
    "        (By.CSS_SELECTOR, 'a#anch_22')\n",
    "        ))\n",
    "        \n",
    "        # 點選 \"date\" 按鈕\n",
    "        driver.find_element(By.CSS_SELECTOR, 'a#anch_22').click()\n",
    "\n",
    "        # 計數器 +1\n",
    "        i += 1\n",
    "    except:\n",
    "        print(f\"等待逾時，進行了{i}次\")\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(lst_stationID)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''JSON 轉換'''\n",
    "with open(f\"C:/WBAN_url.json\", \"w\", encoding=\"utf-8\") as file:\n",
    "    file.write( json.dumps(lst_stationID, ensure_ascii=False) )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
